% openssl

$ rand-fmt: printf -- "-base64\n-hex\n"
$ rsa-bits: printf -- "4096\n2048\n"
$ curve: printf -- "P-192\nP-224\nP-256\nP-384\nP-521\n"

# Generate N random bytes
openssl rand <rand-fmt> <N>

# Generate RSA private key in PKCS#8, ASN.1 DER form, public key in PKIX, ASN.1 DER form.
openssl genpkey \
  -algorithm RSA \
  -out <pkcs8> \
  -outpubkey <pkix> \
  -pkeyopt rsa_keygen_bits:<rsa-bits>

# Convert RSA private key in PKCS#8, ASN.1 DER form to PKCS#1, ASN.1 DER form.
openssl rsa -in <pkcs8> -traditional -out <pkcs1>

# Convert RSA private key in PKCS#1, ASN.1 DER form to PKCS#8, ASN.1 DER form.
openssl pkcs8 -topk8 -nocrypt -in <pkcs1> -out <pkcs8>

# Convert RSA public key in PKIX, ASN.1 DER form to PKCS#1, ASN.1 DER form.
openssl rsa -pubin -in <pkix> -RSAPublicKey_out -out <pkcs1>

# Convert RSA public key in PKCS#1, ASN.1 DER form to PKIX, ASN.1 DER form.
openssl rsa -RSAPublicKey_in -pubout -in <pkcs1> -out <pkix>

# Generate EC private key in PKCS#8, ASN.1 DER form, public key in PKIX, ASN.1 DER form.
openssl genpkey \
  -algorithm EC \
  -out <pkcs8> \
  -outpubkey <pkix> \
  -pkeyopt ec_paramgen_curve:<curve>

# Convert EC private key in PKCS#8, ASN.1 DER form to SEC 1, ASN.1 DER form.
openssl ec -in <pkcs8> -out <sec1>

# Generate Ed25519 private key in PKCS#8, ASN.1 DER form, public key in PKIX, ASN.1 DER form.
openssl genpkey \
  -algorithm ED25519 \
  -out <pkcs8> \
  -outpubkey <pkix>

# Generate X25519 private key in PKCS#8, ASN.1 DER form, PKIX, ASN.1 DER form.
openssl genpkey \
  -algorithm X25519 \
  -out <pkcs8> \
  -outpubkey <pkix>

# Calculate HMAC-SHA256 with a key encoded in hex.
openssl mac -macopt hexkey:<hmac-key> -digest SHA256 -in - HMAC

# Unarchive a PKCS#12 file, and do not encrypt the private keys.
openssl pkcs12 -in - -noenc -legacy

# Show a x509 certificate.
openssl x509 -noout -text -in <cert>

# Show a private key.
openssl pkey -noout -text -in <privatekey>

# Show a public key.
openssl pkey -noout -text -pubin -in <publickey>

# Get the public key of a private key.
openssl pkey -pubout -in <privatekey>

# Generate a self-signed CA
; pathlen:0 means this CA can only sign end-entity certificates.
; subjectKeyIdentifier=hash is the default
; See https://docs.openssl.org/3.3/man5/x509v3_config/#subject-key-identifier
; authorityKeyIdentifier=keyid,issuer is the default
; See https://docs.openssl.org/3.3/man5/x509v3_config/#authority-key-identifier
; The documentation of keyUsage can be found in
; https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.3
openssl req \
  -x509 \
  -newkey EC \
  -noenc \
  -pkeyopt ec_paramgen_curve:<curve> \
  -keyout <ca-key> \
  -subj "/CN=ca" \
  -addext "basicConstraints=critical,CA:TRUE, pathlen:0" \
  -addext "keyUsage=critical, keyCertSign, cRLSign" \
  -days 365 \
  -out <ca-crt>

# Generate a TLS certificate signed by a CA
; The documentation of extendedKeyUsage can be found in
; https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.12
openssl req \
  -x509 \
  -CA <ca-crt> \
  -CAkey <ca-key> \
  -newkey EC \
  -noenc \
  -pkeyopt ec_paramgen_curve:<curve> \
  -keyout <tls-key> \
  -subj "/CN=tls" \
  -addext "basicConstraints=critical,CA:FALSE" \
  -addext "keyUsage=critical, digitalSignature" \
  -addext "extendedKeyUsage=critical, serverAuth, clientAuth" \
  -addext "subjectAltName=critical, DNS:localhost, IP:127.0.0.1, IP:::1" \
  -days 30 \
  -out <tls-crt>

# Generate a self-signed TLS certificate
openssl req \
  -x509 \
  -newkey EC \
  -noenc \
  -pkeyopt ec_paramgen_curve:<curve> \
  -keyout <tls-key> \
  -subj "/CN=tls" \
  -addext "basicConstraints=critical,CA:FALSE" \
  -addext "keyUsage=critical, digitalSignature" \
  -addext "extendedKeyUsage=critical, serverAuth, clientAuth" \
  -addext "subjectAltName=critical, DNS:localhost, IP:127.0.0.1, IP:::1" \
  -days 30 \
  -out <tls-crt>

# Print the SHA256 fingerprint of a certificate
openssl x509 -noout -fingerprint -sha256 -in <crt> | awk -F= '{ gsub(/:/, "", $2); print tolower($2) }'

# Add trusted certificate to macOS keychain
sudo /usr/bin/security add-trusted-cert -d -p ssl -k /Library/Keychains/System.keychain <crt>

# List Firefox profiles
find "$HOME/Library/Application Support/Firefox/Profiles" -maxdepth 2 -type f -name 'cert9.db' -exec dirname {} \;

# Add certificate to NSS
certutil -A -d <profile> -t 'C,,' -n <fingerprint> -i <crt>

# List certificates in NSS
certutil -L -d <profile>

# Remove certificate from NSS
certutil -D -d <profile> -n <fingerprint>
