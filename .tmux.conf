# Terminfo
#
# For some unknown reason, the builtin infocmp on macOS does not look at
# ~/.terminfo even TERMINFO is set.
# Therefore, it is necessary to install ncurses from Homebrew, and
# make it available in $PATH.
#
# And then we can either use the terminfo database that comes with ncurses, or
# install a new one at ~/.terminfo.
# To install a new one at ~/.terminfo, see :h terminfo in neovim.

# $TERM
#
# Program likes neovim has very strict requirement on the value being correct.
# iTerm2.app: $TERM=iterm2
# Terminal.app: $TERM=nsterm
# tmux: $TERM=tmux-256color
# alacritty: $TERM=alacritty

# Known issues
#
# Undercurl support is still missing with neovim + tmux + iTerm2.app.
# Undercurl is supported with neovim + iTerm2.app though.

# Kitty
#
# The author of kitty thinks tmux is no good.
# (https://github.com/kovidgoyal/kitty/issues/391#issuecomment-638320745)
# To me, tmux offers
# - Session restoration.
# - Multiple windows with keyboard shortcuts to navigate between them.
# - Splits in a window.

# By default the prefix is C-b, and C-b is bound to send-prefix.
# So if we want to change the prefix, we want it to be:
#   the prefix is C-Space, and C-Space is bound to send-prefix
set-option -g prefix C-Space
unbind-key C-b
bind-key -r C-Space send-prefix

# Here is what I want
# 1. I am currently in a fish login shell.
# 2. Since I am already in a fish shell, config.fish has been sourced and the environment is assumed to be set up correctly.
# 3. I want to start tmux.
# 4. Thus I start tmux without any options nor arguments.
# 5. When tmux is invoked in this way, it has the following behavior.
#
# a. tmux uses the value of default-shell (which must be an absolute path) to invoke default-command.
# b. When default-shell is unspecified, the value is taken from $SHELL.
# c. When default-command is unspecified, tmux replaces itself with a shell by invoking default-shell with -l, resulting a login shell. See https://github.com/tmux/tmux/blob/e75f3a0060971bd9bcd3ff90ef4a6614b05b0963/spawn.c#L360
# d. If default-command is specified, tmux forks itself, and invoke default-command with default-shell -c.
# e. Thus, when default-command is specified, you will have two shells.
# f. Having two shells is undesirable, for example, $SHLVL is 1 more.
# g. It follows that default-command SHOULD be `exec some-shell`, so that there is only 1 shell, not 2.
#
# A. A login sh shell (which is just a bash) sources /etc/profile, as documented in the INVOCATION section of `man bash`.
# B. /etc/profile on macOS invokes /usr/libexec/path_helper
# C. /usr/libexec/path_helper set PATH to empty, and rebuild it.
# D. Thus running a login shell more than once is harmful.
#
# Of course, this is a problem when $SHELL is bash.
# When $SHELL is fish, it is not a problem at all, because fish does not source /etc/profile.
#
# We leave default-shell unset, so tmux uses $SHELL as default-shell.
# default-command is `exec ${SHELL}` so this short-lived $SHELL instance is replaced with $SHELL.
# Since $SHELL is invoked without -l, the shell is not a login shell.
#
# You may wonder whether exec is available in every possible $SHELL,
# As far as I know, exec is available in bash, zsh, fish, nushell, and elvish.
set-option -g default-command "exec ${SHELL}"

set-option -g default-terminal "tmux-256color"
# According neovim :checkhealth, alacritty inside tmux requires this
set-option -g terminal-features "alacritty:RGB"
set-option -s escape-time 0
set-option -g focus-events on

# Count windows and panes from 1, instead of 0.
# Sessions are still counted from 0 though.
# See https://github.com/tmux/tmux/issues/769
set-option -g base-index 1
set-window-option -g pane-base-index 1
set-option -g renumber-windows on

# Make tmux behave like Terminal.app
set-option -g mouse on
# Do nothing when we stop dragging.
unbind-key -T copy-mode-vi MouseDragEnd1Pane
# Do nothing with a left click down.
unbind-key -T copy-mode-vi MouseDown1Pane
# Clear the selection with a left click up.
bind-key -T copy-mode-vi MouseUp1Pane send-keys -X clear-selection
# Stop selection when we scroll.
# Without this, scroll when there is a selection will expand the selection.
bind-key -T copy-mode-vi WheelUpPane select-pane \; send-keys -X stop-selection \; send-keys -X -N 5 scroll-up
bind-key -T copy-mode-vi WheelDownPane select-pane \; send-keys -X stop-selection \; send-keys -X -N 5 scroll-down
# Cancel without copy with a Enter or an Escape.
bind-key -T copy-mode-vi Enter send-keys -X cancel
bind-key -T copy-mode-vi Escape send-keys -X cancel
# We do not use triple click.
unbind-key -T root TripleClick1Pane
unbind-key -T copy-mode-vi TripleClick1Pane
# Select word with a double click.
bind-key -T root DoubleClick1Pane select-pane -t = \; if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" { send-keys -M } { copy-mode ; send-keys -X select-word }
bind-key -T copy-mode-vi DoubleClick1Pane select-pane \; send-keys -X select-word

# create window and pane in current directory
bind-key c new-window -c "#{pane_current_path}"
bind-key % split-window -h -c "#{pane_current_path}"
bind-key '"' split-window -v -c "#{pane_current_path}"

# Swap window
bind-key -r C-h swap-window -d -t -1
bind-key -r C-l swap-window -d -t +1

# vim key bindings
set-window-option -g mode-keys vi
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi C-v send-keys -X rectangle-on
# Copy without trailing newline.
# This is like kitty's `strip_trailing_spaces always`.
# Ideally, we should use the following to implement strip_trailing_spaces smart. But I have no idea
# why the else statement never get executed.
#bind-key -T copy-mode-vi y if-shell -F "#{selection_active}" { send-keys -X copy-pipe-no-clear "pbcopy" \; display-message "Copied with newline" } { send-keys -X copy-pipe-no-clear "perl -pe 'chomp if eof' | pbcopy" \; display-message "Copied without newline" }
bind-key -T copy-mode-vi y send-keys -X copy-pipe-no-clear "perl -pe 'chomp if eof' | pbcopy" \; display-message "Copied without newline"
bind-key -r k select-pane -U
bind-key -r j select-pane -D
bind-key -r h select-pane -L
bind-key -r l select-pane -R

set-option -g status-interval 5
set-option -g automatic-rename on
set-option -g automatic-rename-format '#{b:pane_current_path}'

bind-key R run-shell 'tmux source-file ~/.tmux.conf; tmux display-message "Sourced"'
