# By default the prefix is C-b, and C-b is bound to send-prefix.
# So if we want to change the prefix, we want it to be:
#   the prefix is C-Space, and C-Space is bound to send-prefix
set-option -g prefix C-Space
unbind-key C-b
bind-key -r C-Space send-prefix

# Here is what I want
# 1. I am currently in a fish login shell.
# 2. Since I am already in a fish shell, config.fish has been sourced and the environment is assumed to be set up correctly.
# 3. I want to start tmux.
# 4. Thus I start tmux without any options nor arguments.
# 5. When tmux is invoked in this way, it has the following behavior.
#
# a. tmux uses the value of default-shell (which must be an absolute path) to invoke default-command.
# b. When default-shell is unspecified, the value is taken from $SHELL.
# c. When default-command is unspecified, tmux replaces itself with a shell by invoking default-shell with -l, resulting a login shell. See https://github.com/tmux/tmux/blob/e75f3a0060971bd9bcd3ff90ef4a6614b05b0963/spawn.c#L360
# d. If default-command is specified, tmux forks itself, and invoke default-command with default-shell -c.
# e. Thus, when default-command is specified, you will have two shells.
# f. Having two shells is undesirable, for example, $SHLVL is 1 more.
# g. It follows that default-command SHOULD be `exec some-shell`, so that there is only 1 shell, not 2.
#
# A. A login sh shell (which is just a bash) sources /etc/profile, as documented in the INVOCATION section of `man bash`.
# B. /etc/profile on macOS invokes /usr/libexec/path_helper
# C. /usr/libexec/path_helper set PATH to empty, and rebuild it.
# D. Thus running a login shell more than once is harmful.
#
# Of course, this is a problem when $SHELL is bash.
# When $SHELL is fish, it is not a problem at all, because fish does not source /etc/profile.
#
# We set default-shell to /bin/sh so that default-command is run with /bin/sh.
# This is a more predictable behavior, as this is what system(3) does.
#
# default-command is `exec ${SHELL}` so this short-lived $SHELL instance is replaced with $SHELL.
# Since $SHELL is invoked without -l, the shell is not a login shell.
set-option -g default-shell "/bin/sh"
set-option -g default-command "exec ${SHELL}"

# $TERMINFO and $TERMINFO_DIRS
#
# Some terminal emulators, like kitty and ghostty, set $TERMINFO to point to a directory
# containing the most accurate terminfo describing their capabilities.
# This is good because the users do not need to provision the terminfo themselves.
# However, setting TERMINFO has the effect of only looking at that directory.
# If $TERMINFO is left set inside tmux, the terminal-based program cannot see the capability of tmux, since that directory does not contain the terminfo of tmux-256color.
#
# Thus setting $TERMINFO is actually a problem.
# A more correct approach is to set $TERMINFO_DIRS instead.
# Those terminal emulators set $TERMINFO before launching the shell,
# we can set $TERMINFO_DIRS and unset $TERMINFO in shell initialization script.
# See home.nix for details.
#
#
# $TERM
#
# A correct value of $TERM tells terminal-based programs how to interact with the terminal.
# Terminal-based programs, in particular, neovim, have a very strict requirement on the value being correct.
# See :help terminfo for details.
#
# The value must match the terminal.
# For example, if it is a kitty terminal, then the value MUST BE xterm-kitty.
# Some terminal emulators, such as kitty and ghostty, get this right by default.
#
# tmux, being a terminal multiplexer, is also a terminal.
# tmux sets $TERM to the value of the option default-terminal.
# The default value of default-terminal is screen.
# To let terminal-based programs to utilizes all capabilities of tmux,
# we use the preferred value, tmux-256color.
#
#
# Conclusion
#
# To make things work, we need
# 1. Terminal emulators, or terminal multiplexers set $TERM correctly.
#   1.1. kitty sets $TERM to xterm-kitty (done by kitty by default)
#   1.2. ghostty sets $TERM to xterm-ghostty (done by ghostty by default)
#   1.3. iTerm2 sets $TERM to xterm-256color. (You can ask iTerm2 to do this)
#   1.4. alacritty sets $TERM to alacritty. (No idea why it does not do this by default)
# 2. $TERMINFO is unset, and $TERMINFO_DIRS contains a list of directory that
#    include all terminal emulators and terminal multiplexers. For terminal emulators
#    that set $TERMINFO, $TERMINFO is PREPENDED to $TERMINFO_DIRS, so the bundled, most
#    accurate capabilities advertised by the terminal emulators are used.
#   2.1. kitty bundles its terminfo. The entries are xterm-kitty.
#   2.2. ghostty bundles its terminfo. The entries are xterm-ghostty.
#   2.3. alacritty bundles its terminfo. The entries are alacritty and alacritty-direct.
#   2.4. iTerm2 bundles its terminfo. The entries are xterm, xterm-new, xterm-256color.
#        So now we see why iTerm2 set $TERM to xterm-256color. It is because
#        it works by providing a modified terminfo of xterm-256color.
set-option -g default-terminal "tmux-256color"

# alacritty offers two terminfo, namely, alacritty and alacritty-direct.
# When alacritty-direct is used, it supports RGB out-of-the-box, but
# it confuses fish shell. The problem is the text color of autosuggetion becomes black.
# When alacritty is used, tmux does not recognized alacritty supports RGB.
# So the following line tells tmux alacritty DOES support RGB.
set-option -sa terminal-features ",alacritty:RGB"

# https://superuser.com/a/1809494
set-option -s escape-time 50
set-option -g focus-events on
# The default is 2000.
set-option -g history-limit 100000
# Show display message for 2s.
set-option -g display-time 2000
# A longer repeat-time. The default is 500ms.
set-option -g repeat-time 1000

# Count windows and panes from 1, instead of 0.
# Sessions are still counted from 0 though.
# See https://github.com/tmux/tmux/issues/769
set-option -g base-index 1
set-window-option -g pane-base-index 1
set-option -g renumber-windows on

# Make tmux behave like Terminal.app
set-option -g mouse on
# Do nothing when we stop dragging.
unbind-key -T copy-mode-vi MouseDragEnd1Pane
# Do nothing with a left click down.
unbind-key -T copy-mode-vi MouseDown1Pane
# Clear the selection with a left click up.
bind-key -T copy-mode-vi MouseUp1Pane send-keys -X clear-selection
# Stop selection when we scroll.
# Without this, scroll when there is a selection will expand the selection.
bind-key -T copy-mode-vi WheelUpPane select-pane \; send-keys -X stop-selection \; send-keys -X -N 5 scroll-up
bind-key -T copy-mode-vi WheelDownPane select-pane \; send-keys -X stop-selection \; send-keys -X -N 5 scroll-down
# Cancel without copy with a Enter or an Escape.
bind-key -T copy-mode-vi Enter send-keys -X cancel
bind-key -T copy-mode-vi Escape send-keys -X cancel
# We do not use triple click.
unbind-key -T root TripleClick1Pane
unbind-key -T copy-mode-vi TripleClick1Pane
# Select word with a double click.
bind-key -T root DoubleClick1Pane select-pane -t = \; if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" { send-keys -M } { copy-mode ; send-keys -X select-word }
bind-key -T copy-mode-vi DoubleClick1Pane select-pane \; send-keys -X select-word

# create window and pane in current directory
bind-key c new-window -c "#{pane_current_path}"
bind-key % split-window -h -c "#{pane_current_path}"
bind-key '"' split-window -v -c "#{pane_current_path}"

# Swap window
bind-key -r C-h swap-window -d -t -1
bind-key -r C-l swap-window -d -t +1

# Navigate window
bind-key -r C-n next-window
bind-key -r C-p previous-window

# vim key bindings
set-window-option -g mode-keys vi
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi C-v send-keys -X rectangle-on
# Copy without trailing newline.
# This is like kitty's `strip_trailing_spaces always`.
# Ideally, we should use the following to implement strip_trailing_spaces smart. But I have no idea
# why the else statement never get executed.
#bind-key -T copy-mode-vi y if-shell -F "#{selection_active}" { send-keys -X copy-pipe-no-clear "pbcopy" \; display-message "Copied with newline" } { send-keys -X copy-pipe-no-clear "perl -pe 'chomp if eof' | pbcopy" \; display-message "Copied without newline" }
bind-key -T copy-mode-vi y send-keys -X copy-pipe-no-clear "perl -pe 'chomp if eof' | pbcopy" \; display-message "Copied without newline"
# These are not repeatable because the repeatable behavior prevents me from typing after switching to a different pane.
bind-key k select-pane -U
bind-key j select-pane -D
bind-key h select-pane -L
bind-key l select-pane -R
bind-key -r K resize-pane -U 1
bind-key -r J resize-pane -D 1
bind-key -r H resize-pane -L 1
bind-key -r L resize-pane -R 1

set-option -g status-interval 5
set-option -g automatic-rename on
set-option -g automatic-rename-format '#{b:pane_current_path}'

bind-key R run-shell 'tmux source-file ~/.tmux.conf; tmux display-message "Sourced"'
